{"version":3,"file":"CRectangle.js","sourceRoot":"","sources":["../../../../../../../../../browser/src/layer/vector/CRectangle.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * CRectangle extends CPolygon and creates a rectangle of given bounds.\n */\n\nclass CRectangle extends CPolygon {\n\n\tconstructor(bounds: cool.Bounds, options: any) {\n\t\tsuper(CRectangle.boundsToPointSet(bounds), options);\n\t}\n\n\tsetBounds(bounds: cool.Bounds) {\n\t\tthis.setPointSet(CRectangle.boundsToPointSet(bounds));\n\t}\n\n\tpublic static boundsToPointSet(bounds: cool.Bounds): CPointSet {\n\t\tif (!bounds.isValid()) {\n\t\t\treturn new CPointSet();\n\t\t}\n\t\treturn CPointSet.fromPointArray([bounds.getTopLeft(), bounds.getTopRight(), bounds.getBottomRight(), bounds.getBottomLeft(), bounds.getTopLeft()]);\n\t}\n}\n\nfunction getOptionsClone(baseOpts: any): any {\n\t// TODO: implement polyfill for Object.assign() instead.\n\tconst newOpt: any = {};\n\tfor (const prop in baseOpts) {\n\t\tif (Object.prototype.hasOwnProperty.call(baseOpts, prop)) {\n\t\t\tnewOpt[prop] = baseOpts[prop];\n\t\t}\n\t}\n\n\treturn newOpt;\n}\n\n// CCellCursor is used for drawing of the self and view cell-cursor on the canvas.\nclass CCellCursor extends CPathGroup {\n\n\tprivate cursorWeight: number = 2;\n\tprivate borderPaths: CRectangle[] = [];\n\tprivate innerContrastBorder: CRectangle;\n\tprivate options: any;\n\n\tconstructor(bounds: cool.Bounds, options: any) {\n\t\tsuper([]);\n\t\tif (options.weight != 1) {\n\t\t\tthis.cursorWeight = Math.round(options.weight);\n\t\t\toptions.weight = 1;\n\t\t}\n\t\tthis.options = options;\n\t\tthis.options.lineJoin = 'miter';\n\t\tthis.options.lineCap = 'butt';\n\t\tthis.options.viewId = CPath.getViewId(options);\n\t\tthis.options.groupType = PathGroupType.CellCursor;\n\n\t\tthis.setBounds(bounds);\n\t}\n\n\tsetBounds(bounds: cool.Bounds) {\n\t\tconst cellBounds = new cool.Bounds(\n\t\t\tbounds.min.subtract(new cool.Point(0.5, 0.5)),\n\t\t\tbounds.max.subtract(new cool.Point(0.5, 0.5))\n\t\t);\n\n\t\t// Compute bounds for border path.\n\t\tconst boundsForBorder: cool.Bounds[] = [];\n\t\tfor (let idx = 0; idx < this.cursorWeight; ++idx) {\n\t\t\tconst pixels = idx; // device pixels from real cell-border.\n\t\t\tboundsForBorder.push(new cool.Bounds(\n\t\t\t\tcellBounds.min.add(new cool.Point(pixels, pixels)),\n\t\t\t\tcellBounds.max.subtract(new cool.Point(pixels, pixels))\n\t\t\t));\n\t\t}\n\n\t\tconst boundsForContrastBorder = new cool.Bounds(\n\t\t\tcellBounds.min.add(new cool.Point(this.cursorWeight, this.cursorWeight)),\n\t\t\tcellBounds.max.subtract(new cool.Point(this.cursorWeight, this.cursorWeight)));\n\n\t\tif (this.borderPaths && this.innerContrastBorder) {\n\t\t\tconsole.assert(this.borderPaths.length === this.cursorWeight);\n\t\t\t// Update the border path.\n\t\t\tthis.borderPaths.forEach(function (borderPath, index) {\n\t\t\t\tborderPath.setBounds(boundsForBorder[index]);\n\t\t\t});\n\t\t\t// Update constrast path\n\t\t\tthis.innerContrastBorder.setBounds(boundsForContrastBorder);\n\n\t\t} else {\n\t\t\tfor (let index = 0; index < this.cursorWeight; ++index) {\n\t\t\t\tconst borderOpt = getOptionsClone(this.options);\n\t\t\t\tborderOpt.name += '-border-' + index;\n\t\t\t\tconst borderPath = new CRectangle(boundsForBorder[index], borderOpt);\n\t\t\t\tthis.borderPaths.push(borderPath);\n\t\t\t\tthis.push(borderPath);\n\t\t\t}\n\n\t\t\tconst contrastBorderOpt = getOptionsClone(this.options);\n\t\t\tcontrastBorderOpt.name += '-contrast-border';\n\t\t\tcontrastBorderOpt.color = 'white';\n\t\t\tthis.innerContrastBorder = new CRectangle(boundsForContrastBorder, contrastBorderOpt);\n\t\t\tthis.push(this.innerContrastBorder);\n\t\t}\n\t}\n\n\t// This method is needed to allow setting up of a popup which is needed for showing\n\t// other user's name in it when the CCellCursor is used for displaying view cell cursors.\n\tbindPopup(content: any, options: any): CPath {\n\t\t// forward to the innermost black border rectangle.\n\t\tconsole.assert(this.borderPaths && this.borderPaths.length, 'borders not setup yet!');\n\n\t\treturn this.borderPaths[0].bindPopup(content, options);\n\t}\n}\n\n// CCellSelection is used for drawing of the self and view cell-range selections on the canvas.\nclass CCellSelection extends CPathGroup {\n\n\tprivate selectionWeight: number = 2;\n\tprivate borderPaths: CPolygon[];\n\tprivate innerContrastBorder: CPolygon;\n\tprivate options: any;\n\n\tconstructor(pointSet: CPointSet, options: any) {\n\t\tsuper([]);\n\t\tthis.selectionWeight = Math.round(options.weight);\n\t\toptions.weight = 1; // Selection has multiple paths each with weight 1.\n\t\tthis.options = options;\n\t\tthis.options.lineJoin = 'miter';\n\t\tthis.options.lineCap = 'butt';\n\t\tthis.options.viewId = CPath.getViewId(options);\n\t\tthis.options.groupType = PathGroupType.CellSelection;\n\n\t\tthis.setPointSet(pointSet);\n\t}\n\n\t// This method is used to create/update the internal CPaths with the correct positions and dimensions\n\t// using CPointSet data-structure.\n\tsetPointSet(pointSet: CPointSet) {\n\t\tconst outerPointSet = pointSet;\n\t\touterPointSet.applyOffset(new cool.Point(0.5, 0.5), false /* centroidSymmetry */, true /* preRound */);\n\n\t\tconst borderPointSets: CPointSet[] = [];\n\n\t\tfor (let idx = 0; idx < this.selectionWeight; ++idx) {\n\t\t\tconst pixels = idx; // device pixels from real cell-border.\n\t\t\tconst borderPset = outerPointSet.clone();\n\t\t\tborderPset.applyOffset(new cool.Point(-pixels, -pixels), true /* centroidSymmetry */, false /* preRound */);\n\t\t\tborderPointSets.push(borderPset);\n\t\t}\n\t\tconst contrastBorderPointSet = outerPointSet.clone();\n\t\tcontrastBorderPointSet.applyOffset(new cool.Point(-this.selectionWeight, -this.selectionWeight), true /* centroidSymmetry */, false /* preRound */);\n\n\t\tif (this.borderPaths && this.innerContrastBorder) {\n\t\t\tconsole.assert(this.borderPaths.length === this.selectionWeight);\n\t\t\t// Update the border path.\n\t\t\tthis.borderPaths.forEach(function (borderPath, index) {\n\t\t\t\tborderPath.setPointSet(borderPointSets[index]);\n\t\t\t});\n\t\t\tthis.innerContrastBorder.setPointSet(contrastBorderPointSet);\n\n\t\t} else {\n\t\t\tthis.borderPaths = [];\n\t\t\tfor (let index = 0; index < this.selectionWeight; ++index) {\n\t\t\t\tconst borderOpt = getOptionsClone(this.options);\n\t\t\t\tborderOpt.fillColor = undefined;\n\t\t\t\tborderOpt.fillOpacity = undefined;\n\t\t\t\tborderOpt.fill = false;\n\t\t\t\tborderOpt.name += '-border-' + index;\n\t\t\t\tconst borderPath = new CPolygon(borderPointSets[index], borderOpt);\n\t\t\t\tthis.borderPaths.push(borderPath);\n\t\t\t\tthis.push(borderPath);\n\t\t\t}\n\n\t\t\tconst contrastBorderOpt = getOptionsClone(this.options);\n\t\t\tcontrastBorderOpt.name += '-contrast-border';\n\t\t\tcontrastBorderOpt.color = 'white';\n\t\t\tcontrastBorderOpt.fill = true;\n\t\t\tthis.innerContrastBorder = new CPolygon(contrastBorderPointSet, contrastBorderOpt);\n\t\t\tthis.push(this.innerContrastBorder);\n\t\t}\n\t}\n\n\tgetBounds(): cool.Bounds {\n\t\tif (!this.borderPaths || !this.borderPaths.length)\n\t\t\treturn new cool.Bounds(undefined);\n\t\treturn this.borderPaths[0].getBounds();\n\t}\n\n\tanyRingBoundContains(corePxPoint: cool.Point): boolean {\n\t\tif (!this.borderPaths || !this.borderPaths.length)\n\t\t\treturn false;\n\n\t\treturn this.borderPaths[0].anyRingBoundContains(corePxPoint);\n\t}\n}"]}