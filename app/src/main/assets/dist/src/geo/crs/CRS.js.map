{"version":3,"file":"CRS.js","sourceRoot":"","sources":["../../../../../../../../../browser/src/geo/crs/CRS.js"],"names":[],"mappings":"AAAA,gCAAgC;AAChC;;GAEG;AAEH,CAAC,CAAC,GAAG,GAAG;IACP,oCAAoC;IACpC,aAAa,EAAE,UAAU,MAAM,EAAE,IAAI;QACpC,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,EAChD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC;IAED,sCAAsC;IACtC,aAAa,EAAE,UAAU,KAAK,EAAE,IAAI;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EACxB,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAEvE,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;IACtD,CAAC;IAED,qEAAqE;IACrE,OAAO,EAAE,UAAU,MAAM;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,0CAA0C;IAC1C,SAAS,EAAE,UAAU,KAAK;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,yCAAyC;IACzC,KAAK,EAAE,UAAU,IAAI;QACpB,OAAO,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,oEAAoE;IACpE,kBAAkB,EAAE,UAAU,IAAI;QACjC,IAAI,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QAEnC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAC1B,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EACpB,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAC7C,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAElD,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,qGAAqG;IACrG,uBAAuB;IACvB,uBAAuB;IAEvB,+EAA+E;IAC/E,mBAAmB;IAEnB,mDAAmD;IACnD,UAAU,EAAE,UAAU,MAAM;QAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAChF,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;QAErF,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3B,CAAC;CACD,CAAC","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n/*\n * L.CRS is the base object for all defined CRS (Coordinate Reference Systems) in Leaflet.\n */\n\nL.CRS = {\n\t// converts geo coords to pixel ones\n\tlatLngToPoint: function (latlng, zoom) {\n\t\tvar projectedPoint = this.projection.project(latlng),\n\t\t    scale = this.scale(zoom);\n\n\t\treturn this.transformation._transform(projectedPoint, scale);\n\t},\n\n\t// converts pixel coords to geo coords\n\tpointToLatLng: function (point, zoom) {\n\t\tvar scale = this.scale(zoom),\n\t\t    untransformedPoint = this.transformation.untransform(point, scale);\n\n\t\treturn this.projection.unproject(untransformedPoint);\n\t},\n\n\t// converts geo coords to projection-specific coords (e.g. in meters)\n\tproject: function (latlng) {\n\t\treturn this.projection.project(latlng);\n\t},\n\n\t// converts projected coords to geo coords\n\tunproject: function (point) {\n\t\treturn this.projection.unproject(point);\n\t},\n\n\t// defines how the world scales with zoom\n\tscale: function (zoom) {\n\t\treturn 256 * Math.pow(2, zoom);\n\t},\n\n\t// returns the bounds of the world in projected coords if applicable\n\tgetProjectedBounds: function (zoom) {\n\t\tif (this.infinite) { return null; }\n\n\t\tvar b = this.projection.bounds,\n\t\t    s = this.scale(zoom),\n\t\t    min = this.transformation.transform(b.min, s),\n\t\t    max = this.transformation.transform(b.max, s);\n\n\t\treturn L.bounds(min, max);\n\t},\n\n\t// whether a coordinate axis wraps in a given range (e.g. longitude from -180 to 180); depends on CRS\n\t// wrapLng: [min, max],\n\t// wrapLat: [min, max],\n\n\t// if true, the coordinate space will be unbounded (infinite in all directions)\n\t// infinite: false,\n\n\t// wraps geo coords in certain ranges if applicable\n\twrapLatLng: function (latlng) {\n\t\tvar lng = this.wrapLng ? L.Util.wrapNum(latlng.lng, this.wrapLng, true) : latlng.lng,\n\t\t    lat = this.wrapLat ? L.Util.wrapNum(latlng.lat, this.wrapLat, true) : latlng.lat;\n\n\t\treturn L.latLng(lat, lng);\n\t}\n};\n"]}